CREATE TABLE ORDER_SERVICE.ORDERS
(
    ORD_ID           NUMERIC(10, 0)        NOT NULL,
    ORD_INTERNAL_ID  CHARACTER VARYING(36) NOT NULL,
    ORD_ACCOUNT_ID   CHARACTER VARYING(36) NOT NULL,
    ORD_SYMBOL       CHARACTER VARYING(20) NOT NULL,
    ORD_SIDE         CHARACTER VARYING(20) NOT NULL,
    ORD_QUANTITY     CHARACTER VARYING(8),
    ORD_STATUS       CHARACTER VARYING(11),
    ORD_CREATED      TIMESTAMP(6) WITHOUT TIME ZONE NOT NULL,
    ORD_LAST_UPDATED TIMESTAMP(6) WITHOUT TIME ZONE NOT NULL,
    ORD_VERSION      NUMERIC(6, 0)         NOT NULL
) WITH (
      OIDS = FALSE
      );

ALTER TABLE ORDER_SERVICE.ORDERS
    ADD CONSTRAINT PK_ORDER PRIMARY KEY (ORD_ID);

ALTER TABLE ORDER_SERVICE.ORDERS
    ADD CONSTRAINT CHK_ORDER_01 CHECK (ORD_SIDE IN ('BUY', 'SELL')) NOT VALID;

ALTER TABLE ORDER_SERVICE.ORDERS
    ADD CONSTRAINT CHK_ORDER_02 CHECK (ORD_STATUS IN ('PROCESSED', 'FAILED')) NOT VALID;

ALTER TABLE ORDER_SERVICE.ORDERS
    ADD CONSTRAINT CHK_ORDER_03 UNIQUE (ORD_INTERNAL_ID);

CREATE SEQUENCE IF NOT EXISTS ORDER_SERVICE.SEQ_ORD_ID
    INCREMENT BY 2
    START WITH 1
    MAXVALUE 9999999999
    MINVALUE 1
    NO CYCLE
    CACHE 20;

CREATE
OR REPLACE FUNCTION ORDER_SERVICE.ord_pre_ins_upd_trig$order()
    RETURNS trigger
AS
$BODY$
BEGIN
    IF
TG_OP = 'INSERT' THEN
        new.ord_created := CURRENT_TIMESTAMP;
END IF;
    new.ord_last_updated
:= CURRENT_TIMESTAMP;
    IF
TG_OP = 'INSERT' THEN
        RETURN NEW;
    ELSIF
TG_OP = 'UPDATE' THEN
        RETURN NEW;
END IF;
END;
$BODY$
LANGUAGE plpgsql;

CREATE TRIGGER ORD_pre_ins_upd_trig
    BEFORE INSERT OR
UPDATE
    ON order_service.ORDERS
    FOR EACH ROW
    EXECUTE PROCEDURE ORDER_SERVICE.ord_pre_ins_upd_trig$order();
